{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,OAGaC,SAApBC,iBAAiB,oBAAoB,WAEJ,MAAlCC,EAAOF,SAASG,cAAc,SA8BpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAtCbJ,EAAKD,iBAAiB,UAGLY,eAAOC,GACtBA,EAAMC,iBAGoB,MAApBC,EAAad,EAAKC,cAAc,kBAChCc,EAAYf,EAAKC,cAAc,iBAC/Be,EAAchB,EAAKC,cAAc,mBACjCgB,EAAeC,SAASJ,EAAWK,OACnCC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAGX,IAArBf,EAAQa,EACsC,IAA7C,IAAIK,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,UACQpB,EAAcoB,EAAI,EAAGlB,GAC3BT,EAAAF,GAASG,OAAO2B,QAAQ,uBAAqBD,EAAK,QAASlB,M,CAC3D,MACAT,EAAAF,GAASG,OAAO2B,QAAQ,sBAAoBD,EAAK,QAASlB,M,CAG5DA,GAASgB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// Инициализация библиотеки\nNotiflix.Notify.init(); \n\n// Ожидаем полной загрузки страницы\ndocument.addEventListener('DOMContentLoaded', function() {\n  // Получаем форму и добавляем обработчик события submit\n  const form = document.querySelector('.form');\n  form.addEventListener('submit', onSubmit);\n\n  // Обработчик события submit\n  async function onSubmit(event) {\n    event.preventDefault();\n\n    // Получаем значения полей формы\n    const delayInput = form.querySelector('[name=\"delay\"]');\n    const stepInput = form.querySelector('[name=\"step\"]');\n    const amountInput = form.querySelector('[name=\"amount\"]');\n    const initialDelay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    // Создаем промисы с задержками\n    let delay = initialDelay; // Используем отдельную переменную для увеличения задержки\n    for (let i = 0; i < amount; i++) {\n      try {\n        await createPromise(i + 1, delay);\n        Notiflix.Notify.success(`✅ Fulfilled promise ${i + 1} in ${delay}ms`);\n      } catch {\n        Notiflix.Notify.success(`❌ Rejected promise ${i + 1} in ${delay}ms`);\n      }\n\n      delay += step; // Увеличиваем задержку на шаг для следующего промиса\n    }\n  }\n\n  // Функция создания промиса с задержкой\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n});\n\n"],"names":["$7Y9D8","parcelRequire","$parcel$interopDefault","Notify","init","document","addEventListener","form","querySelector","createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","async","event","preventDefault","delayInput","stepInput","amountInput","initialDelay","parseInt","value","step","amount","i","success"],"version":3,"file":"03-promises.6a55d482.js.map"}